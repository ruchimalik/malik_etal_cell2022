%% Sample code to plot photometry signals using Tom D's plotting functions 

% written by Tom Davidson (tjd@alum.mit.edu) April 2016; modified by Clio Korn (clio.korn@ucsf.edu) spring 2018

% NOTE: in order to run this script, Tom Davidson's collection of Matlab functions (in folders called 'tjd-shared-code' and 'tjd-shared-code-extra) must be in your Matlab path



%% STEP 1: run Processing_photoM.m script to import, demodulate, and normalize raw photometry data



%% STEP 2: load c_dFF data structure (generated by Processing_photoM.m)

% load('Test_dFF.mat');                                                   % edit name of c_dFF/c_Mag/c_Regress/bls as appropriate for specific animal and session to be plotted
% load('Test_c_Mag.mat');
% load('Test_c_Regress.mat');
% load('Test_bls.mat');

Test_dFF = c_dFF;
Test_c_Mag = c_Mag;
Test_c_Regress = c_Regress;
lTest_bls = bls;



%% STEP 3: import spreadsheet of timestamps of behaviorally relevant events

times = xlsread('NOE_Social_D3.xlsx', 'M5', 'C3:E10');       % xlsread('NAME OF SPREADSHEET', 'NAME OF TAB', 'CELLS TO BE IMPORTED')
                                                                            % each column in the spreadsheet is a type of behavioral event, each row is a single trial
trial_num = times(:,1); 
start_interaction = times(:,2);
end_interaction = times(:,3);                                                      
% start_corner = times(:,5);
% end_corner = times(:,6);
% start_approach = times(:,8);
% end_approach = times(:,9);
% start_retreat = times(:,11);
% end_retreat = times(:,12);
% start_rearing = times(:,14);
% end_rearing = times(:,15);
% start_aggression = times(:,17);
% end_aggression = times(:,18);
% start_grooming = times(:,20);
% end_grooming = times(:,21);



%% STEP 4 (OPTIONAL): define and index out subsets of timepoints of interest - if trials need to be subdivided (e.g. correct vs. incorrect, early vs. late, etc.)
% the below code applies to rule shifting data; adapt as required for other types of tasks

corr = isnan(start_eating);
corr_indices = find(corr == 0);
incorr = isnan(remove_bait);
incorr_indices = find(incorr == 0);

IAcriterion = [12];
IAcriterion_index = find(corr_indices == IAcriterion);
RScriterion = [27];
RScriterion_index = find(corr_indices == RScriterion);


% all trials:

all_all_starttrial = start_trial;
all_early_starttrial = start_trial(1:5,1);
all_late_starttrial = start_trial((length(start_trial) - 4):length(start_trial),1);

all_all_startdig = start_dig1;

all_all_endtrial = end_trial;
all_early_endtrial = end_trial(1:5,1);
all_late_endtrial = end_trial((length(end_trial) - 4):length(end_trial),1);

all_all_startITI = start_ITI;
all_early_startITI = start_ITI(1:5,1);
all_late_startITI = start_ITI((length(start_ITI) - 4):length(start_ITI),1);


% correct trials:

corr_all_starttrial = start_trial(corr_indices);
corr_all_startdig = start_dig1(corr_indices);
corr_all_starteat = start_eating(corr_indices);
corr_all_endtrial = end_trial(corr_indices);
corr_all_startITI = start_ITI(corr_indices);


% incorrect trials:

incorr_all_starttrial = start_trial(incorr_indices);
incorr_all_startdig = start_dig1(incorr_indices);
incorr_all_removebait = remove_bait(incorr_indices);
incorr_all_endtrial = end_trial(incorr_indices);
incorr_all_startITI = start_ITI(incorr_indices);



%% STEP 5: generate full-session 3-panel plot with times of trials overlaid (i.e. Tom D's 'prettier multipanel plots')


% define time points of events of interest and time window for full session
t_1 = 60.75;                                                          % t_1 is the vector of timestamps of the behavioral event that BEGINS each trial
t_2 = 2539.7;                                                             % t_2 is the vector of timestamps of the behavioral event that ENDS each trial            
FP_timewin = [(t_1 - 10) (t_2 + 10)];                         % session time window starts 30sec before the first t_1 and end 30sec after the last t_2 (adjust buffer time as appropriate) 

% provide experiment name (displayed at top of plot)
exptname = 'NOE_ratHC_M1';

% prep data for plotting
c_Mag_scaled = contcombine(...
    contchans(c_Regress, 'chans', 1),...
    contfn(contchans(c_Regress, 'chans', 2), 'fn', @(x) x.*bls(1)+bls(2)));

% generate figure
figure('Position', [0 0 900 500]);

% top plot: 470 and 405 demodulated signals
sp(1) = subplot(3,1,1); 
title(exptname);
quickplot(contfn(c_Mag, 'fn', @(x)x*1000),...
    'color', [0.3 0.3 1.0; 1 0.3 1],...
    'subsample', false);
ylabel({'Fluorescence amplitude' '(mV at Detector)'})
yl = ylim;
xlim([FP_timewin(1,1) FP_timewin(1,2)]);                                    % x axis shows time, covering the full session length defined above
ylim([0 yl(2)*1.1]);
lh(1) = legend;
lh(1).Location = 'best';
lh(1).Interpreter = 'none';

% middle plot: scaled 470 and 405 signals
sp(2) = subplot (3,1,2); quickplot(contfn(c_Mag_scaled, 'fn', @(x)x*1000),...
    'color', [0.3 0.3 1.0; 1 0.3 1]),...
    'subsample', false;
title('Best fit of smoothed isosbestic control to signal channel');
ylabel({'Fluorescence amplitude'  '(scaled)'});
lh(2) = legend;
lh(2).Location = 'best';
lh(2).Interpreter = 'none';
  %c_dFF.data = c_dFF.data./100;
% bottom plot: normalized signal i.e. dF/F
sp(3) = subplot (3,1,3); quickplot(c_dFF, ...
    'subsample', false, ...
    'color', [0 0 0]); 
 ylim([-0.0 0.1])                                                           % adjust scale of the y axis i.e. dF/F as appropriate (common range is -0.2 to 0.45 but can be customized to suit signal size)
title('Normalized signal');
ylabel('dF/F');
linkaxes(sp, 'x')

% overlay trial times on above plots
hold on;
trial_seg = [t_1 t_2];
seg_plot(trial_seg, 'Axis', sp(1), 'FaceColor', [1 0 0]);
hold on;
trial_seg = [t_1 t_2];
seg_plot(trial_seg, 'Axis', sp(2), 'FaceColor', [1 0 0]);
hold on;
trial_seg = [t_1 t_2];
seg_plot(trial_seg, 'Axis', sp(3), 'FaceColor', [0 0 0]);

% overlay of different point of interest



hold on;
% Approach_seg = [start_approach end_approach];
% seg_plot(Approach_seg, 'Axis', sp(3), 'FaceColor', [1 0 0]);
% hold on;
interaction_seg = [start_interaction end_interaction]; 
seg_plot(interaction_seg, 'Axis', sp(3), 'FaceColor', [1 1 0]);
% hold on;
% retreat_seg = [start_retreat end_retreat]; 
% seg_plot(retreat_seg, 'Axis', sp(3), 'FaceColor', [0 1 0]);



%% STEP 6: generate plots of cross-trial average response at particular behavioral events (i.e. Tom D's 'triggered-average plots')


% NOTE: because of how the periseg.m function works, this must be done in pairs of behavioral events (even though they will be plotted separately), and the two events must have the same number of trials
% NOTE: there are two options for 'detrend' - '' (i.e. leaving this variable blank) will plot the absolute dF/F value, 'constant' will further normalize it somehow so that signal may fall below zero
% NOTE: there are two options for 'plottype' - 'trigave' gives line plot of average signal, 'trials' gives trial-by-trial color plot
% NOTE: to edit titles of triggered-average plots, edit code at line 360 in periseg.m - need to run code for each figure separately so can adjust periseg.m for each
% NOTE: to edit x axis label, edit code at line 425 of periseg.m


first_event = start_interaction;                                                  % define the first event of interest as one of the behavioral events defined in Steps 3 and 4 above
second_event = end_interaction;                                                  % likewise, define the second event of interest; the 2nd event should come after the 1st (within a trial)

trial_seg = [first_event second_event];                                     % the 'trial segment' runs from the first event of interest to the second

% plot the FIRST event of interest
periseg('cdat', c_dFF,...                                                   % data to be used is c_dFF (dF/F values for full session)
    'segs', trial_seg,...                                                   % the segments of data to be used are defined by trial_seg (from above)
    'trigtype', 'segstart',...                                              % the 'trigtype' (i.e. event around which to center the plot) is the 'segstart' i.e. the first event of interest
    'detrend', '',...                                                       % the 'detrend' variable can either be left blank ('') or further normalized ('constant') (see NOTE above)
    't_pre', 10, 't_post',10 ,...                                           % 't_pre' and 't_post' define the time (in sec) to be shown before and after the event of interest; adjust as desired
    'plottype', 'trigave',...                                               % the 'plottype' can be either 'trigave' or 'trials' for averaged vs. trial-by-trial plots (see NOTE above)
    'plotsem', true);                                                       % leave 'plotsem' as true

% plot the SECOND event of interest
periseg('cdat', c_dFF,...                                                   % data to be used is c_dFF (dF/F values for full session)
    'segs', trial_seg,...                                                   % the segments of data to be used are defined by trial_seg (from above)
    'trigtype', 'segend',...                                                % the 'trigtype' (i.e. event around which to center the plot) is the 'segend' i.e. the second event of interest
    'detrend', '',...                                                       % the 'detrend' variable can either be left blank ('') or further normalized ('constant') (see NOTE above)
    't_pre', 10, 't_post', 10,...                                           % 't_pre' and 't_post' define the time (in sec) to be shown before and after the event of interest; adjust as desired
    'plottype', 'trigave',...                                               % the 'plottype' can be either 'trigave' or 'trials' for averaged vs. trial-by-trial plots (see NOTE above)
    'plotsem', true);                                                       % leave 'plotsem' as true




