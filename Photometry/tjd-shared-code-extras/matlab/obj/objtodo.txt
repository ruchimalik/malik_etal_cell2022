
TODO: 
    -'segment' obj (see below)
    -'bout' obj
    -'events' obj 

    -non-obj cont -> call it contdata? cf matlab/cont/conttodo
    -parmest/columnnormfr (see below) cf parmwin: need to calculate
     larger parmest, but only return/use subset (parmwini)
    -get FK's radon code, obj-ify it?
    -tunecurve/linpf/linpfall should become drawtunecurve.m
    -tunecurve/spatialinfo/fisherinfo should work with tc inputs
    -pfperm in raster/parmest
    -cache limits diff for diff fields, or by memory? conts will make
     us run out of memory
    -test mkclhist 'firstspike'
    -draw2d: non-uniform grids?  move scale/sharpen/autoscale into
     draw2d?

BUGS: 

   -parmest for large timewindows (e.g. 10sec) the exp term
    (exp(-binsize*sum(tcdats))) underruns a double float to 0, giving
    lots of NaNs. Also, when using probabilistic estimator, we overrun
    when there are many spikes in a bin. Currently we detect and
    warn--could avoid by multiplying some other terms? working in log
    space?
   -specgram ensure offsets correct -- is MATLAB wrong in its plotting
    of specgram to only offset by (nwind-overlap)/2, rather than
    nwind/2 (see 'help specgram', comments at end of mkspecgram.m)
   -mkcontdata ADCrange is [-2048 2047], inputrange is [-10 10], gives
    204.75 ADC units/volt. Should it be 204.8?

PERFORMANCE:
   -improve mkparm caching (use contdata instead)
   -unneeded calcs? mode/modei in parmest? just create new 'parmestmode'
    obj?

GENERAL/CACHING:

    obj functions: outputs = function(inputs)

         OBJopt = mkOBJopt(method options)
            OBJ = mkOBJ(OBJopt + data + timewin [+ cache])
     OBJdrawopt = mkOBJdrawopt(display options)
              h = drawOBJ(OBJ + OBJdrawopt + ax)
           bool = cache_eqfn(oldOBJ,newOBJ) % in obj_cachesearch

    obj fields:
     'type'
      ...
     [inputs]
     ...
     [outputs]
     ...
     'template'  obj_reparse/error-checking
     'cache' 
     'cache_hit'  flag

   -replace 'histedgectrs' with histendctrs *use draw2D!*
   -'warning field', test on draw (visual signal--exclamation pt?),
    for things like float underrun in parmest. i.e. 'recoverable
    errors'. This way when we pull something from the cache, we still
    issue a warning. Maybe create a 'class' of warnings that we can
    trap.
   -should we update 'cache' inside obj_cachesearch? integrate
    obj_cleanup into 'obj_cachestore'/'mkcache'? so that the logic of
    hiding e, contdata is all in one place?
   -adding 'objs' to the cache in drawplot: replace with 'mergecache',
    where the fieldnames correspond to the object types.
   -obj/ tree should be just for object creation, etc, or also utility functions?
   -ParseArgs -> parseArgsLite
   -consider true object-orientation
   -write up function_handle bug. Affects userdata, save/load, causes
    persistent/globals to segfault.


MK*OPT:

   -'template' arg for error-checking (and use it in mkobj)--this will
    also fill in for empty mk*opt arguments. Useful defaults, so that
    I can, e.g. call drawcont('contdata',cdat). and have contopt and
    contdrawopt just made for me?

   -arg = lower(arg) where appropriate to make comparisons easier later

TUNECURVE:
            tcopt = MKTUNECURVEOPT(opts, filtering, param names)
c              tc = MKTUNECURVE(tcopt, cls)
[[         tcdopt = MKTUNECURVEDRAWOPT(cf linpfall, linpfmult)
[[                  DRAWTUNECURVE(tc, tcdopt, ax)

    -presets for 'place', 'inbound' 'outbound'
    -use mkparm in mktunecurve instead of posifilt
    -filter/smooth tunecurves? FK kernel?
    -use '@ge', 'gt', where appropriate?

TCPEAK:
           pksopt = MKPEAKSOPT
              pks = MKPEAKS(data + peaksopt)


PARMEST:
            peopt = MKPARMESTOPT(method opts)
c              pe = MKPARMEST(data, peopt)
           pedopt = MKPARMESTDRAWOPT(scaling, etc)
                    DRAWPARMEST(pe, pedopt, ax)

  -label, built from tunecurve.name
  -select subset of bins for tc? (useful for position-centered,
   theta-triggered average); could also do this in mktunecurve (use
   subset of precomputed ones
  -columnnormfr: if we pass in more than one tunecurve, 'stack' them,
   then split them, calculating as if they were contiguous space. (is
   this a way of doing 3-d estimates?)
  -'surf' instead of 'image'? when using non-uniform
   tunecurveopt.histedges, we plot the resultant parmest incorrectly.
  -smoothing in display? should be in cm, use filtfilt
  -sliding window for parmest: calculate clhist at smaller binsize,
   apply rectwin filter to clhists before doparmest (overlap2)
    

RASTER: rastopt = MKRASTEROPT(tick size, colormode, maxpks, rasterbg)
           rast = MKRASTER(e, clnos, clperm, ax, timewin,
           tunecurveopt, ...  tcpeakopt, rasteropt) rastdopt =
           MKRASTERDRAWOPT(colormap, clim) DRAWRASTER(rast + rastdopt
           + axes)

(the object is a formatted image, not plottable data)

   -non-positioned rasters, for, e.g. cortical cells,
    interneurons. (generic 'event' plot?)
   -status text saying npks/cell in bottom right?
   -ylim only compute subregion (tunecurveopt?, parmwini?)

CLHIST:

   -use something other than 'findnearest'--maybe write 'findnext'?
    for firstspiketriggers

PARM:
          parm = MKPARM
      parmdopt = MKPARMDRAWOPT
                 DRAWPARM

   -merge into contdata - keep filtering, colors
   -what should ylim be? from tcopt too?
   -mkparm caching: keep data from whole pos, find starti/endi
    corresponding to timewin. On cache_eqfn, recalc starti/endi if
    necessary. (the cache_hit also means we won't store lots of
    copies, hurrah).

MKFILT

     filtopt = MKFILTOPT
        filt = MKFILT

   -pass in precomputed filters to slp? rather than just contopt.filtopt
   -gausswin/rectwin/hatwin , specify window width at 1/2 height, etc...?

CONT:
        contopt = MKCONTOPT(filtopt);
c          cont = MKCONT(contdata, timewin, channels + contopt)
       contdopt = MKCONTDRAWOPT(ylevels, plottype)
                  DRAWCONT(contdopt, cont ,ax)

 -[for contdata struct, imcont, contfilt,...see matlab/cont/conttodo.txt]
 -cache equivalence for intermediates? contenv if filtopt the same. Or
  have an ordered list of operations, store intermediates in cache?
 -obj_eqfn should see that chans/chanlabels can be equal.
 -'contvar','contdata','chans','chanlabels' is analogous to
  ename/e/clnos

SPECGRAM:
          sgopt = MKSPECGRAMOPT(method options: multitaper, window size)
c            sg = MKSPECGRAM(sgopt + contdata + timewin)
         sgdopt = MKSPECGRAMDRAWOPT(draw options: smoothing,log scale ...)
                  DRAWSPECGRAM(specgram + sgdrawopt + axes)

  -understand, clear up 1/f, log10 stuff for plotting
  -widening timewin. make sure conservative, make optional?
  -deal with large timewindows; before bailing completely, update
   overlap to reduce column count?

BOUTS:
[[	boutopt = MKBOUTOPT(invert, thresh_sd, thresh_dat, window, ...
[[                            mindur, minevdur, argunits, name);
[[           bout = MKBOUT(boutopt + contvar/chans/... + timewin);

  -no drawOBJ, just pass in to segments, etc
  -use cont style timewini on cache_hits
  -bouts can be defined by behavior, lfp (i.e. apply a function to
   any cont signal?). break out of tunecurve. Logical index vs. pairs
   of times/indices?
  -position (or other parameter) should be imported to a contdata
   struct, then filtered/segmented from there (merge drawparm as
   options into drawcont, including coloring pts based on appropriate
   bouts)
  -also use for parmest, raster. to, e.g. compute parmest for all times lvel
   is above threshold. drawparmest needs to draw them at various
   locations. just multiple calls to mk/drawparmest?

SEGMENTS:    

[[         segopt = MKSEGOPT()
[[            seg = MKSEG(segopt + cont + timewin)
[[        segdopt = MKSEGDRAWOPT(draw options: colors,boxes,edges, starts/ends)
[[                  DRAWSEG(seg + segdrawop + axes)

  -draw segs as before (but break out of slp): translucent panels over
   all other plots in overlay axis (or whatever axis requested!--make
   segs just another plot, but with the option/default for it to be drawn in
   the 'overlay' -- we are gonna need multiple plots/axis, soon)

  -show labels for segments
  -2-d seglists, i.e. plot regions of interest/lines on top of posest
   maps: detected diagonals, w/FK arrowheads, e.g. +/- slopes
   different colors

EVENTS:

   (display as segments or histogram(cont))
      -timestamp, value, threshold on value
      -multiple params/timestamp? like e.pos/e.cl
      -but e.pos is really an unevenly sampled continuous signal, not
       a list of events?
