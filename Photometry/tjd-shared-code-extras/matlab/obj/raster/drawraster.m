function [hs] = drawraster(varargin)
% DRAWRASTER - plot spike raster image generated by mkraster
% $Id$

  hs = [];
  
  a = struct(...
      'raster', [],...
      'opt', [],...
      'parm', [],...
      'parmdrawopt', [],...
      'whitebg', [],...
      'ax', [],...
      'xlim',[]);
  
  a = parseArgsLite(varargin,a);
  
  if isempty(a.opt),
    a.opt = mkrasterdrawopt();
  end
  
  if isempty(a.parmdrawopt),
    a.parmdrawopt = mkparmdrawopt();
  end
  
  if isempty(a.ax),
    a.ax = gca;
    set(a.ax, 'position', [0 0 a.raster.imwidpix a.raster.imhtpix]);
  end
  
  axpos = get(a.ax, 'position');
  
  if all(axpos(3:4) ~= [a.raster.imwidpix a.raster.imhtpix]),
    warning('drawraster:rastersizemismatch', ['raster not same size as axes, beware missing data/aliasing ' ...
             '(ok for printed figures)']);
  end
  
  if isempty(a.opt.cmap),
    cmap = colormap(a.ax, a.opt.cmap);
  else
    cmap = colormap(a.ax);
  end
  
  if ~isempty(a.opt.cmapwin),
    cmapwin = a.opt.cmapwin;
  else
    cmapwin = [1 size(cmap,1)];
  end

  if ~a.raster.rasteropt.ranked,
    h = draw2d('data', a.raster.rastimg,...
               'cmap', cmap,...
               'cmapwin', cmapwin,...
               'datalims', [1 diff(cmapwin)+1],...
               'xhistendctrs', a.raster.timehistedgecenters,...
               'yhistendedges', a.raster.parmhistendedges,...
               'ax', a.ax);
  else
    % ranked rasters, use cell number as y-extent
    h = draw2d('data', a.raster.rastimg,...
               'cmap', cmap,...
               'cmapwin', cmapwin,...
               'datalims', [1 diff(cmapwin)+1],...
               'xhistendctrs', a.raster.timehistedgecenters,...
               'yhistendedges', a.raster.parmhistendedges,...
               'ax', a.ax);
  end
    
  hs = [hs; h];


  % plot behavior parameters (includes legend)
  a.parmdrawopt.legend = []; % we'll draw our own here

  % don't plot parm if displaying ranked rasters
  if ~a.raster.rasteropt.ranked && ~isempty(a.parm),
    h =  drawparm('parm', a.parm,...
                  'opt', a.parmdrawopt,...
                  'whitebg', a.whitebg,...
                  'ax', a.ax);
    hs = [hs; h];
  end
  
  if a.opt.drawlegend,
    % draw figure legend
    h = contdrawlegend('chanlabels', a.raster.label,...
                       'dispname', a.opt.dispname,...
                       'plottype', 'image',...
                       'cmaptop', a.parmdrawopt.ptcolor,... 
                       'whitebg', a.whitebg,...
                       'ax', a.ax);
    hs = [hs; h];
  end
  
  % do ylim after imagesc
  lims = objbounds(hs);
  if isempty(lims), 
    lims = [xlim(a.ax) ylim(a.ax)];
  end
  
  if ~a.raster.rasteropt.ranked && ...
        ~isempty(a.parmdrawopt.datalim) && ...
        numel(a.parmdrawopt.datalim)>1
    yl = [min([a.parmdrawopt.datalim(1) lims(3)]),...
          max([a.parmdrawopt.datalim(2) lims(4)])];
  else
    yl = lims(3:4);
  end
  ylim(a.ax, yl);
  
  %%% set xlim (usu according to requested timewin_plot from spikeslpos)
  if ~isempty(a.xlim),
    xlim(a.ax, a.xlim);
  end
  
  % remove numbers from x/y axes if requested. Leave ticks
  if ~a.opt.drawxaxis,
    set(a.ax,'xticklabel', []);
  end
  
  if ~a.opt.drawyaxis,
    set(a.ax,'yticklabel', []);
  end
  