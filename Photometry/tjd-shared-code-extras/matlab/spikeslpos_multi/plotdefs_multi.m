function [sp] = plotdefs_multi(varargin)

a = struct('e', [],...
           'epochi', [],...
           'runepochi', [],...
           'tcopt', []);
a = parseArgsLite(varargin,a);

%%% tunecurveopts for place fields

if isempty(a.tcopt),
  a.tcopt = tcoptdefs_multi('e', a.e,...
                            'epochi', a.epochi,...
                            'runepochi', a.runepochi,...
                            'runspeed', 10,...
                            'pos_nbins', 100,...
                            'trackend_offset', 30,...
                            'pos_smooth_sd_cm', 5,...
                            'hd_nbins', 36);
end
  
% parmestopt for standard probablistic reconstruction
peopt = mkparmestopt('preset', 'bayes_zhang');

% parmdrawopt for plotting behavior
pdopt = pdoptdefs_multi('e', a.e, 'epochi', a.epochi);


%%% now make some plots

% parmest for plotting reconstructions
parmestplot = slmkplots_multi('type', 'parmest');

sp.posest_pos_x_vel = ...
    parseArgsLite({'tunecurveopt', a.tcopt.pos_x_vel,...
               'parmdrawopt', pdopt.pos_x_vel, ...
               'parmestopt', peopt},...
              parmestplot);

sp.posest_outb = ...
    parseArgsLite({'tunecurveopt', a.tcopt.outbound, ...
               'parmdrawopt', pdopt.outbound, ...
               'parmestdrawopt', mkparmestdrawopt('RGBchan', 2),...
               'parmestopt', peopt},...
              parmestplot);

sp.posest_inb = ...
    parseArgsLite({'tunecurveopt', a.tcopt.inbound, ...
               'parmdrawopt', pdopt.inbound ...
               'parmestdrawopt', mkparmestdrawopt('RGBchan', 1),...
               'parmestopt', peopt},...
              parmestplot);

sp.posest_place = ...
    parseArgsLite({'tunecurveopt', a.tcopt.place, ...
               'parmdrawopt', pdopt.place, ...
               'parmestopt', peopt},...
              parmestplot);

sp.parmest_headdir = ...
    parseArgsLite({'tunecurveopt', a.tcopt.headdir, ...
               'parmdrawopt', pdopt.generic, ...
               'parmestopt', peopt},...
              parmestplot);

% parmest 'modemap' plots

pedopt_mode = mkparmestdrawopt('modemap', 1,...
                          'modethresh', 0.1);

sp.posest_pos_x_vel_mode = ...
    parseArgsLite({'parmestdrawopt', pedopt_mode},...
              sp.posest_pos_x_vel);

sp.posest_outb_mode = ...
    parseArgsLite({'parmestdrawopt', pedopt_mode},...
              sp.posest_outb);

sp.posest_inb_mode = ...
    parseArgsLite({'parmestdrawopt', pedopt_mode},...
              sp.posest_inb);

sp.posest_place_mode = ...
    parseArgsLite({'parmestdrawopt', pedopt_mode},...
              sp.posest_place);

sp.parmest_headdir_mode = ...
    parseArgsLite({'parmestdrawopt', pedopt_mode},...
              sp.parmest_headdir);


% parm plots for behavior
parmplot = slmkplots_multi('type', 'parm');

sp.parm_outb = ...
    parseArgsLite({'tunecurveopt', a.tcopt.outbound, ...
               'parmdrawopt', pdopt.outbound},...
              parmplot);

sp.parm_inb = ...
    parseArgsLite({'tunecurveopt', a.tcopt.inbound, ...
               'parmdrawopt', pdopt.inbound},...
              parmplot);

sp.parm_pos_x_vel = ...
    parseArgsLite({'tunecurveopt', a.tcopt.pos_x_vel, ...
               'parmdrawopt', pdopt.pos_x_vel},...
              parmplot);

sp.parm_place = ...
    parseArgsLite({'tunecurveopt', a.tcopt.place, ...
               'parmdrawopt', pdopt.place},...
              parmplot);

sp.parm_headdir = ...
    parseArgsLite({'tunecurveopt', a.tcopt.headdir, ...
               'parmdrawopt', pdopt.generic},...
              parmplot);


sp.parm_centx = ...
    parseArgsLite({'tunecurveopt', a.tcopt.centx, ...
                   'parmdrawopt', pdopt.generic},...
                  parmplot);


sp.parm_centy = ...
    parseArgsLite({'tunecurveopt', a.tcopt.centy, ...
                   'parmdrawopt', pdopt.generic},...
                  parmplot);

% raster plots
rastplot = slmkplots_multi('type', 'raster');

sp.raster_outb = parseArgsLite({'tunecurveopt' a.tcopt.outbound ...
                            'parmdrawopt', pdopt.outbound}, ...
                           rastplot);

sp.raster_inb = parseArgsLite({'tunecurveopt' a.tcopt.inbound...
                           'parmdrawopt', pdopt.inbound}, ...
                          rastplot);

sp.raster_place = parseArgsLite({'tunecurveopt' a.tcopt.place ...
                             'parmdrawopt', pdopt.place}, ...
                            rastplot);

sp.raster_headdir = parseArgsLite({'tunecurveopt' a.tcopt.headdir ...
                               'parmdrawopt', pdopt.generic}, ...
                            rastplot);

%%% spectrograms
sgplot = slmkplots_multi('type', 'specgram');
sp.specgram_100ms = parseArgsLite({'specgramopt', mkspecgramopt('window_time', 0.1)}, ...
                           sgplot);

sp.specgram_200ms = parseArgsLite({'specgramopt', mkspecgramopt('window_time', 0.2)}, ...
                           sgplot);

sp.specgram_500ms = parseArgsLite({'specgramopt', mkspecgramopt('window_time', 0.5)}, ...
                           sgplot);

sp.specgram_1s = parseArgsLite({'specgramopt', mkspecgramopt('window_time', 1)}, ...
                           sgplot);

%%% continuous signals
sp.cont = slmkplots_multi('type', 'cont');

%%% filtopts for eeg

fopts = filtoptdefs;
sp.lfp = sp.cont;

% make sp.lfp_(filtname) and sp.lfp_(filtname)_env for envelope
for fn = fieldnames(fopts)',
  fn = fn{1};
  newf = ['lfp_' fn];

  sp.(newf) = sp.lfp;
  sp.(newf).contopt.filtopt = fopts.(fn);

  newfenv = [newf '_env'];
  sp.(newfenv) = sp.(newf);
  sp.(newfenv).contopt.envopt = mkenvopt();
end


%%%%% make some useful named plot arrays

sp.sp1pxv = {sp.posest_pos_x_vel};

sp.sp4alt = {sp.posest_outb...
             sp.raster_outb...
             sp.posest_inb...
             sp.raster_inb};

sp.sp3posest = {sp.posest_outb...
                sp.posest_inb...
                sp.posest_place};

sp.sp6alt = {sp.posest_outb...
             sp.raster_outb...
             sp.posest_inb...
             sp.raster_inb...
             sp.posest_place...
             sp.raster_place};

sp.sp4mirror = {sp.posest_outb...
                sp.raster_outb...
                sp.raster_inb...
                sp.posest_inb};
sp.sp4mirror{3}.yflip = 1;
sp.sp4mirror{4}.yflip = 1;

sp.default = {sp.posest_pos_x_vel...
              sp.raster_outb...
              sp.raster_inb};

% 20 ms bins by default
sp.default{1}.dat.timebinsize = 0.020;